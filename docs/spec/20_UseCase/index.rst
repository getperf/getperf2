ユースケース
============

想定ケース
----------

* イベント(実行契機)
   * 機器搬入時
      * 搬入前／後の設定チェック
      * 後戻り作業をなくすことが主目的
      * イベントスケジュールは厳密。開始、終了日の設定
      * 項目タグ付けが有効。例：システム名、プロジェクト名、採取項目
   * 監視設定時、システム構築
      * 運用前の準備期間
      * インフラ運用メンバーが行うことが多い
* 場所
   * LAN経由、異なるネットワーク環境
   * インベントリ採取は作業PC単体で実行できるよう可搬性を持たせる
* 利用者
   * サーバ出荷部門
   * 運用部門(インフラ/アプリ)

ニーズ
------

使いやすさ
~~~~~~~~~~

* どこでも使用できる
   * 採取だけ現地で行い、採取したデータからその後、LANにつないで解析、登録を行うオフライン実行ができる
   * エッジエージェントとの通信は、 HTTP／HTTPSなど疎通確認がしやすいプロトコルを使用する
   * プロキシー環境での利用(プロキシー経由の転送)を想定する
* 直ぐできる
   * 実行環境に依存しないバイナリモジュールを利用。デプロイは不要
   * フロント／エッジツールで使用する言語は、Java, Go とする
* 軽い
   * フットプリントの小さいアーキテクチャ
   * フロント／エッジツールで永続データは残さない
   * 採取データは、2,3 世代のみ保持する。通信障害リトライ用
* 簡単
   * 検査対象ホストの接続情報、プラットフォームをExcelで設定できる。ExcelからJSONへの変換して設定情報を保持する
   * 収集結果をExcelで参照できる。結果はJSONでも保持する
   * Excel　編集後、シェルからコマンド実行し、 Excel チェックシートを確認

効率化／自動化
~~~~~~~~~~~~~~

* 設定ファイルの分散/集中管理
   * 設定ファイルはフロントツールで管理。接続情報／対象プラットフォーム／項目のフィルタリングなど
   * エージェントはフロントツールから設定を自動取得。インターフェースは REST API を想定
* 変更管理
   * スケジューラで定期収集を行い、サーバ側で変更ログの自動保存
   * 変更内容がトレースできるようにする。フロントツールでチェックシートによる差分チェックをする。Redmineで変更履歴を残す
* タグ付け
   * 収集したデータにタグを付けれれる。設備チケット、メトリック、デバイスなど
   * 情報検索でタグをキーにした検索ができる。システム名、管理部門、インシデント名など

拡張性
~~~~~~
* 複雑な構造にしない
   * フロントツール一台で収集から解析までができる
   * データを永続化したい／残したいときのみサーバを使用
   * エージェントは、エッジ環境でないと収集できないとき、 変更管理の対象でスケジュール実行が必要なときに使用する
* プラグイン機能
   * コアとプラグインモジュールの分離
   * プラグインに各プラットフォームのインベントリ収集シナリオ、解析方法、DB登録方法を定義する
   * プラグインはその場でコーディング／カスタマイズできる。実行コマンドを追加するなど
